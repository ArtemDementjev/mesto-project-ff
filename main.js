(()=>{"use strict";var __webpack_modules__={29:()=>{eval("\n;// CONCATENATED MODULE: ./src/scripts/api.js\nvar config = {\n  baseURL: 'https://nomoreparties.co/v1/wff-cohort-16/',\n  headers: {\n    authorization: '11d21809-1731-4190-b45a-c5d2098fc1b9',\n    'Content-Type': 'application/json'\n  }\n};\nfunction getResponseData(res) {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n}\nfunction getAccountInfo() {\n  return fetch(\"\".concat(config.baseURL, \"users/me\"), {\n    method: \"GET\",\n    headers: config.headers\n  }).then(getResponseData);\n}\nfunction getInitialCards() {\n  return fetch(\"\".concat(config.baseURL, \"cards\"), {\n    method: \"GET\",\n    headers: config.headers\n  }).then(getResponseData);\n}\nfunction postCard(newPlaceName, newPlaceLink) {\n  return fetch(\"\".concat(config.baseURL, \"cards\"), {\n    method: 'POST',\n    headers: config.headers,\n    body: JSON.stringify({\n      name: \"\".concat(newPlaceName.value),\n      link: \"\".concat(newPlaceLink.value)\n    })\n  }).then(getResponseData);\n}\nfunction patchAvatar(newLink) {\n  return fetch(\"\".concat(config.baseURL, \"users/me/avatar\"), {\n    method: 'PATCH',\n    headers: config.headers,\n    body: JSON.stringify({\n      avatar: \"\".concat(newLink)\n    })\n  }).then(getResponseData);\n}\nfunction patchProfileInfo(profileName, profileAbout) {\n  return fetch(\"\".concat(config.baseURL, \"users/me\"), {\n    method: 'PATCH',\n    headers: config.headers,\n    body: JSON.stringify({\n      name: \"\".concat(profileName),\n      about: \"\".concat(profileAbout)\n    })\n  }).then(getResponseData);\n}\nfunction deleteCardFromServer(cardID) {\n  return fetch(\"\".concat(config.baseURL, \"cards/\").concat(cardID), {\n    method: 'DELETE',\n    headers: config.headers\n  }).then(getResponseData);\n}\nfunction deleteLike(cardID) {\n  return fetch(\"\".concat(config.baseURL, \"cards/likes/\").concat(cardID), {\n    method: 'DELETE',\n    headers: config.headers\n  }).then(getResponseData);\n}\nfunction putLike(cardID) {\n  return fetch(\"\".concat(config.baseURL, \"cards/likes/\").concat(cardID), {\n    method: 'PUT',\n    headers: config.headers\n  }).then(getResponseData);\n}\n;// CONCATENATED MODULE: ./src/scripts/card.js\nvar cardFunctions = {\n  createCard: createCard,\n  deleteCard: deleteCard,\n  likeCard: likeCard\n};\n\nfunction createCard(cardTemplate, cardObject, functions, popupFunction, ownerId, openConfirmDeletePopup) {\n  var cardElement = getCardTemplate(cardTemplate);\n  var deleteButton = cardElement.querySelector('.card__delete-button');\n  var heartButton = cardElement.querySelector('.card__like-button');\n  var cardImage = cardElement.querySelector('.card__image');\n  var likesQuantity = cardElement.querySelector('.likes-quantity');\n  likesQuantity.innerText = cardObject.likes.length;\n  cardImage.setAttribute('src', cardObject.link);\n  cardImage.setAttribute('alt', cardObject.name);\n  cardElement.querySelector('.card__title').textContent = cardObject.name;\n  deleteButton.addEventListener('click', function (evt) {\n    var cardToDelete = {\n      card: cardElement,\n      id: cardObject._id\n    };\n    openConfirmDeletePopup(evt, cardToDelete);\n  });\n  heartButton.addEventListener('click', function () {\n    return functions.likeCard(heartButton, cardObject, likesQuantity);\n  });\n  cardImage.addEventListener('click', function (evt) {\n    return popupFunction(evt);\n  });\n  if (!(ownerId === cardObject.owner._id)) {\n    deleteButton.style.display = 'none';\n  }\n  if (cardObject.likes.some(function (object) {\n    return object._id === ownerId;\n  })) {\n    heartButton.classList.add('card__like-button_is-active');\n  }\n  // cardElement.setAttribute('id', cardObject._id);\n  return cardElement;\n}\n;\nfunction deleteCard(card) {\n  card.remove();\n}\n;\nfunction likeCard(heartButton, cardObject, likesQuantity) {\n  if (heartButton.classList.value.includes('card__like-button_is-active')) {\n    deleteLike(cardObject._id).then(function (result) {\n      heartButton.classList.toggle('card__like-button_is-active');\n      likesQuantity.innerText = result.likes.length;\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  } else {\n    putLike(cardObject._id).then(function (result) {\n      heartButton.classList.toggle('card__like-button_is-active');\n      likesQuantity.innerText = result.likes.length;\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  }\n}\n;\nfunction getCardTemplate(cardTemplate) {\n  return cardTemplate.querySelector('.places__item').cloneNode(true);\n}\n;\n;// CONCATENATED MODULE: ./src/scripts/modal.js\nfunction openModal(popupToOpen) {\n  popupToOpen.classList.add('popup_is-opened');\n  document.addEventListener('keydown', closeByEscape);\n  popupToOpen.addEventListener('mousedown', closeHandler);\n}\n;\nfunction closeByEscape(evt) {\n  if (evt.key === 'Escape') {\n    var popupOpened = document.querySelector('.popup_is-opened');\n    closeModal(popupOpened);\n  }\n}\n;\nfunction closeModal(popup) {\n  popup.classList.remove('popup_is-opened');\n  document.removeEventListener('keydown', closeByEscape);\n  popup.removeEventListener('mousedown', closeHandler);\n}\n;\nfunction closeHandler(evt) {\n  if (evt.target.classList.contains('popup_is-opened')) {\n    closeModal(evt.target);\n  }\n  ;\n}\n;\n;// CONCATENATED MODULE: ./src/scripts/validation.js\nfunction showInputError(formElement, inputElement, errorMessage, settings) {\n  var errorElement = formElement.querySelector(\".\".concat(inputElement.id, \"-error\"));\n  inputElement.classList.add(settings.inputErrorClass);\n  errorElement.textContent = errorMessage;\n  errorElement.classList.add(settings.errorClass);\n}\n;\nfunction hideInputError(formElement, inputElement, settings) {\n  var errorElement = formElement.querySelector(\".\".concat(inputElement.id, \"-error\"));\n  inputElement.classList.remove(settings.inputErrorClass);\n  errorElement.classList.remove(settings.errorClass);\n  errorElement.textContent = '';\n}\n;\nfunction checkInputValidity(formElement, inputElement, settings) {\n  if (inputElement.validity.patternMismatch) {\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\n  } else {\n    inputElement.setCustomValidity('');\n  }\n  ;\n  if (!inputElement.validity.valid) {\n    showInputError(formElement, inputElement, inputElement.validationMessage, settings);\n  } else {\n    hideInputError(formElement, inputElement, settings);\n  }\n  ;\n}\n;\nfunction hasInvalidInput(inputList) {\n  return inputList.some(function (element) {\n    return !element.validity.valid;\n  });\n}\n;\nfunction toggleButtonState(inputList, buttonElement, settings) {\n  if (hasInvalidInput(inputList)) {\n    buttonElement.classList.add(settings.inactiveButtonClass);\n  } else {\n    buttonElement.classList.remove(settings.inactiveButtonClass);\n  }\n  ;\n}\n;\nfunction setEventListeners(formElement, settings) {\n  var inputList = Array.from(formElement.querySelectorAll(settings.inputSelector));\n  var buttonElement = formElement.querySelector(settings.submitButtonSelector);\n  toggleButtonState(inputList, buttonElement, settings);\n  inputList.forEach(function (inputElement) {\n    inputElement.addEventListener('input', function () {\n      checkInputValidity(formElement, inputElement, settings);\n      toggleButtonState(inputList, buttonElement, settings);\n    });\n  });\n}\n;\nfunction enableValidation(settings) {\n  var formList = Array.from(document.querySelectorAll(settings.formSelector));\n  formList.forEach(function (formElement) {\n    setEventListeners(formElement, settings);\n  });\n}\n;\nfunction clearValidation(formElement, settings) {\n  var inputList = Array.from(formElement.querySelectorAll(settings.inputSelector));\n  var buttonElement = formElement.querySelector(settings.submitButtonSelector);\n  toggleButtonState(inputList, buttonElement, settings);\n  inputList.forEach(function (inputElement) {\n    hideInputError(formElement, inputElement, settings);\n  });\n}\n;// CONCATENATED MODULE: ./src/index.js\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\nvar cardTemplate = document.querySelector('#card-template').content;\nvar popupEditProfile = document.querySelector('.popup_type_edit');\nvar popupAddCard = document.querySelector('.popup_type_new-card');\nvar popupWithImage = document.querySelector('.popup_type_image');\nvar popupEditAvatar = document.querySelector('.popup_type_edit_image');\nvar popupConfirmDelete = document.querySelector('.popup_type_confirm_delete');\nvar buttonProfileEdit = document.querySelector('.profile__edit-button');\nvar buttonAddCard = document.querySelector('.profile__add-button');\nvar avatar = document.querySelector('.profile__image');\nvar crossButtons = Array.from(document.querySelectorAll('.popup__close'));\nvar formEditProfile = document.forms['edit-profile'];\nvar inputsEditProfile = {\n  name: formEditProfile['name'],\n  about: formEditProfile['description']\n};\nvar formConfirmDelete = document.forms['confirm-delete'];\nvar cardToDeleteGlobal = {};\nvar formEditAvatar = document.forms['edit-profile-image'];\nvar inputEditAvatar = formEditAvatar['avatar-edit'];\nvar validationSettings = {\n  formSelector: '.popup__form',\n  inputSelector: '.popup__input',\n  submitButtonSelector: '.popup__button',\n  inactiveButtonClass: 'popup__button_disabled',\n  inputErrorClass: 'popup__input_type_error',\n  errorClass: 'popup__error_visible'\n};\nvar profileDataOnPage = {\n  name: document.querySelector('.profile__title'),\n  about: document.querySelector('.profile__description'),\n  avatar: document.querySelector('.profile__image')\n};\nvar formNewPlace = document.forms['new-place'];\nvar newPlaceName = formNewPlace['place-name'];\nvar newPlaceLink = formNewPlace['link'];\nvar popupImage = document.querySelector('.popup__image');\nvar popupCaption = document.querySelector('.popup__caption');\nvar container = document.querySelector('.places__list');\nfunction submitEditProfileForm(evt) {\n  evt.preventDefault();\n  evt.submitter.innerText = 'Сохранение...';\n  patchProfileInfo(inputsEditProfile.name.value, inputsEditProfile.about.value).then(function (result) {\n    profileDataOnPage.name.textContent = result.name;\n    profileDataOnPage.about.textContent = result.about;\n    closeModal(popupEditProfile);\n  }).catch(function (err) {\n    return console.log(err);\n  }).finally(function () {\n    evt.submitter.innerText = 'Сохранить';\n  });\n}\n;\nfunction submitEditAvatarForm(evt) {\n  evt.preventDefault();\n  evt.submitter.innerText = 'Сохранение...';\n  patchAvatar(inputEditAvatar.value).then(function (result) {\n    profileDataOnPage.avatar.style.backgroundImage = \"url(\".concat(result.avatar, \")\");\n    closeModal(popupEditAvatar);\n  }).catch(function (err) {\n    return console.log(err);\n  }).finally(function () {\n    evt.submitter.innerText = 'Сохранить';\n  });\n}\n;\nfunction submitConfirmDeleteForm(evt) {\n  evt.preventDefault();\n  deleteCardFromServer(cardToDeleteGlobal.id).then(function (res) {\n    cardFunctions.deleteCard(cardToDeleteGlobal.card);\n    closeModal(popupConfirmDelete);\n  }).catch(function (err) {\n    return console.log(err);\n  });\n  // const cardToDelete = document.getElementById(`${evt.target.closest('.popup').id}`);\n}\nfunction openImagePopup(evt) {\n  openModal(popupWithImage);\n  popupImage.src = evt.target.src;\n  popupImage.alt = evt.target.alt;\n  popupCaption.innerText = evt.target.alt;\n}\n;\nfunction openConfirmDeletePopup(evt, cardToDelete) {\n  openModal(popupConfirmDelete);\n  // popupConfirmDelete.setAttribute('id', `${evt.target.closest('.card').id}`);\n  cardToDeleteGlobal.card = cardToDelete.card;\n  cardToDeleteGlobal.id = cardToDelete.id;\n}\n;\nenableValidation(validationSettings);\ncrossButtons.forEach(function (item) {\n  item.addEventListener('click', function (evt) {\n    closeModal(evt.target.closest('.popup'));\n  });\n});\nbuttonProfileEdit.addEventListener('click', function () {\n  openModal(popupEditProfile);\n  clearValidation(formEditProfile, validationSettings);\n  formEditProfile.querySelector(validationSettings.submitButtonSelector).classList.add(validationSettings.inactiveButtonClass);\n  inputsEditProfile.name.value = profileDataOnPage.name.innerText;\n  inputsEditProfile.about.value = profileDataOnPage.about.innerText;\n});\nbuttonAddCard.addEventListener('click', function () {\n  formNewPlace.reset();\n  openModal(popupAddCard);\n  clearValidation(formNewPlace, validationSettings);\n});\navatar.addEventListener('click', function () {\n  openModal(popupEditAvatar);\n  clearValidation(inputEditAvatar, validationSettings);\n  formEditAvatar.reset();\n});\nformConfirmDelete.addEventListener('submit', submitConfirmDeleteForm);\nformEditProfile.addEventListener('submit', submitEditProfileForm);\nformEditAvatar.addEventListener('submit', submitEditAvatarForm);\nformNewPlace.addEventListener('submit', function (evt) {\n  evt.preventDefault();\n  evt.submitter.innerText = 'Создание...';\n  postCard(newPlaceName, newPlaceLink).then(function (result) {\n    container.prepend(cardFunctions.createCard(cardTemplate, result, cardFunctions, openImagePopup, result.owner._id, openConfirmDeletePopup));\n    closeModal(popupAddCard);\n  }).catch(function (err) {\n    return console.log(err);\n  });\n});\nPromise.all([getAccountInfo(), getInitialCards()]).then(function (_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n    accountInfo = _ref2[0],\n    cards = _ref2[1];\n  profileDataOnPage.name.textContent = accountInfo.name;\n  profileDataOnPage.about.textContent = accountInfo.about;\n  profileDataOnPage.avatar.style.backgroundImage = \"url(\".concat(accountInfo.avatar, \")\");\n  cards.forEach(function (item) {\n    container.append(cardFunctions.createCard(cardTemplate, item, cardFunctions, openImagePopup, accountInfo._id, openConfirmDeletePopup));\n  });\n}).catch(function (err) {\n  return console.log(err);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFGLElBQUE7SUFBeEJHLFdBQVcsR0FBQUYsS0FBQTtJQUFFRyxLQUFLLEdBQUFILEtBQUE7RUFDeEJyQixpQkFBaUIsQ0FBQ3hILElBQUksQ0FBQ21DLFdBQVcsR0FBRzRHLFdBQVcsQ0FBQy9JLElBQUk7RUFDckR3SCxpQkFBaUIsQ0FBQy9HLEtBQUssQ0FBQzBCLFdBQVcsR0FBRzRHLFdBQVcsQ0FBQ3RJLEtBQUs7RUFDdkQrRyxpQkFBaUIsQ0FBQ25ILE1BQU0sQ0FBQ3NDLEtBQUssQ0FBQ3VGLGVBQWUsVUFBQS9JLE1BQUEsQ0FBVTRKLFdBQVcsQ0FBQzFJLE1BQU0sTUFBRztFQUM3RTJJLEtBQUssQ0FBQzlDLE9BQU8sQ0FBQyxVQUFTcUMsSUFBSSxFQUFFO0lBQzNCWCxTQUFTLENBQUNxQixNQUFNLENBQUNuSSxhQUFhLENBQUNDLFVBQVUsQ0FDdkNHLFlBQVksRUFDWnFILElBQUksRUFDSnpILGFBQWEsRUFDYnNILGNBQWMsRUFDZFcsV0FBVyxDQUFDdEcsR0FBRyxFQUNmbEIsc0JBQXNCLENBQUMsQ0FBQztFQUM1QixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMsQ0FDRDhCLEtBQUssQ0FBQyxVQUFDQyxHQUFHO0VBQUEsT0FBS0MsT0FBTyxDQUFDQyxHQUFHLENBQUNGLEdBQUcsQ0FBQztBQUFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZXN0by1wcm9qZWN0LWZmLy4vc3JjL3NjcmlwdHMvYXBpLmpzP2EzOTciLCJ3ZWJwYWNrOi8vbWVzdG8tcHJvamVjdC1mZi8uL3NyYy9zY3JpcHRzL2NhcmQuanM/NjhmMCIsIndlYnBhY2s6Ly9tZXN0by1wcm9qZWN0LWZmLy4vc3JjL3NjcmlwdHMvbW9kYWwuanM/YTBlYSIsIndlYnBhY2s6Ly9tZXN0by1wcm9qZWN0LWZmLy4vc3JjL3NjcmlwdHMvdmFsaWRhdGlvbi5qcz8xNmRjIiwid2VicGFjazovL21lc3RvLXByb2plY3QtZmYvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb25maWcgPSB7XHJcbiAgYmFzZVVSTDogJ2h0dHBzOi8vbm9tb3JlcGFydGllcy5jby92MS93ZmYtY29ob3J0LTE2LycsXHJcbiAgaGVhZGVyczoge1xyXG4gICAgYXV0aG9yaXphdGlvbjogJzExZDIxODA5LTE3MzEtNDE5MC1iNDVhLWM1ZDIwOThmYzFiOScsXHJcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gZ2V0UmVzcG9uc2VEYXRhKHJlcykge1xyXG4gIGlmIChyZXMub2spIHtcclxuICAgIHJldHVybiByZXMuanNvbigpXHJcbiAgfVxyXG4gIHJldHVybiBQcm9taXNlLnJlamVjdChg0J7RiNC40LHQutCwOiAke3Jlcy5zdGF0dXN9YCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBY2NvdW50SW5mbyAoKSB7XHJcbiAgcmV0dXJuIGZldGNoKGAke2NvbmZpZy5iYXNlVVJMfXVzZXJzL21lYCwge1xyXG4gICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgaGVhZGVyczogY29uZmlnLmhlYWRlcnNcclxuICAgIH0pXHJcbiAgICAudGhlbihnZXRSZXNwb25zZURhdGEpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRJbml0aWFsQ2FyZHMgKCkge1xyXG4gIHJldHVybiBmZXRjaChgJHtjb25maWcuYmFzZVVSTH1jYXJkc2AsIHtcclxuICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgIGhlYWRlcnM6IGNvbmZpZy5oZWFkZXJzXHJcbiAgICB9KVxyXG4gICAgLnRoZW4oZ2V0UmVzcG9uc2VEYXRhKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcG9zdENhcmQobmV3UGxhY2VOYW1lLCBuZXdQbGFjZUxpbmspIHtcclxuICByZXR1cm4gZmV0Y2goYCR7Y29uZmlnLmJhc2VVUkx9Y2FyZHNgLCB7XHJcbiAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgIGhlYWRlcnM6IGNvbmZpZy5oZWFkZXJzLFxyXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICBuYW1lOiBgJHtuZXdQbGFjZU5hbWUudmFsdWV9YCxcclxuICAgICAgbGluazogYCR7bmV3UGxhY2VMaW5rLnZhbHVlfWBcclxuICAgIH0pXHJcbiAgICB9KVxyXG4gICAgLnRoZW4oZ2V0UmVzcG9uc2VEYXRhKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGF0Y2hBdmF0YXIobmV3TGluaykge1xyXG4gIHJldHVybiBmZXRjaChgJHtjb25maWcuYmFzZVVSTH11c2Vycy9tZS9hdmF0YXJgLCB7XHJcbiAgICBtZXRob2Q6ICdQQVRDSCcsXHJcbiAgICBoZWFkZXJzOiBjb25maWcuaGVhZGVycyxcclxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgYXZhdGFyOiBgJHtuZXdMaW5rfWBcclxuICAgIH0pXHJcbiAgICB9KVxyXG4gICAgLnRoZW4oZ2V0UmVzcG9uc2VEYXRhKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGF0Y2hQcm9maWxlSW5mbyhwcm9maWxlTmFtZSwgcHJvZmlsZUFib3V0KSB7XHJcbiAgcmV0dXJuIGZldGNoKGAke2NvbmZpZy5iYXNlVVJMfXVzZXJzL21lYCwge1xyXG4gICAgbWV0aG9kOiAnUEFUQ0gnLFxyXG4gICAgaGVhZGVyczogY29uZmlnLmhlYWRlcnMsXHJcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgIG5hbWU6IGAke3Byb2ZpbGVOYW1lfWAsXHJcbiAgICAgIGFib3V0OiBgJHtwcm9maWxlQWJvdXR9YFxyXG4gICAgfSlcclxuICAgIH0pXHJcbiAgICAudGhlbihnZXRSZXNwb25zZURhdGEpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVDYXJkRnJvbVNlcnZlcihjYXJkSUQpIHtcclxuICByZXR1cm4gZmV0Y2goYCR7Y29uZmlnLmJhc2VVUkx9Y2FyZHMvJHtjYXJkSUR9YCwge1xyXG4gICAgbWV0aG9kOiAnREVMRVRFJyxcclxuICAgIGhlYWRlcnM6IGNvbmZpZy5oZWFkZXJzXHJcbiAgICB9KVxyXG4gICAgLnRoZW4oZ2V0UmVzcG9uc2VEYXRhKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlTGlrZShjYXJkSUQpIHtcclxuICByZXR1cm4gZmV0Y2goYCR7Y29uZmlnLmJhc2VVUkx9Y2FyZHMvbGlrZXMvJHtjYXJkSUR9YCwge1xyXG4gICAgbWV0aG9kOiAnREVMRVRFJyxcclxuICAgIGhlYWRlcnM6IGNvbmZpZy5oZWFkZXJzXHJcbiAgICB9KVxyXG4gICAgLnRoZW4oZ2V0UmVzcG9uc2VEYXRhKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcHV0TGlrZShjYXJkSUQpIHtcclxuICByZXR1cm4gZmV0Y2goYCR7Y29uZmlnLmJhc2VVUkx9Y2FyZHMvbGlrZXMvJHtjYXJkSUR9YCwge1xyXG4gICAgbWV0aG9kOiAnUFVUJyxcclxuICAgIGhlYWRlcnM6IGNvbmZpZy5oZWFkZXJzXHJcbiAgICB9KVxyXG4gICAgLnRoZW4oZ2V0UmVzcG9uc2VEYXRhKVxyXG59IiwiZXhwb3J0IGNvbnN0IGNhcmRGdW5jdGlvbnMgPSB7XHJcbiAgY3JlYXRlQ2FyZCxcclxuICBkZWxldGVDYXJkLFxyXG4gIGxpa2VDYXJkXHJcbn07XHJcblxyXG5pbXBvcnQge2RlbGV0ZUxpa2UsIHB1dExpa2V9IGZyb20gJy4vYXBpJztcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUNhcmQoY2FyZFRlbXBsYXRlLCBjYXJkT2JqZWN0LCBmdW5jdGlvbnMsIHBvcHVwRnVuY3Rpb24sIG93bmVySWQsIG9wZW5Db25maXJtRGVsZXRlUG9wdXApIHtcclxuICBjb25zdCBjYXJkRWxlbWVudCA9IGdldENhcmRUZW1wbGF0ZShjYXJkVGVtcGxhdGUpO1xyXG4gIGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IGNhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX19kZWxldGUtYnV0dG9uJyk7XHJcbiAgY29uc3QgaGVhcnRCdXR0b24gPSBjYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZF9fbGlrZS1idXR0b24nKTtcclxuICBjb25zdCBjYXJkSW1hZ2UgPSBjYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZF9faW1hZ2UnKTtcclxuICBjb25zdCBsaWtlc1F1YW50aXR5ID0gY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmxpa2VzLXF1YW50aXR5Jyk7XHJcbiAgbGlrZXNRdWFudGl0eS5pbm5lclRleHQgPSBjYXJkT2JqZWN0Lmxpa2VzLmxlbmd0aDtcclxuICBjYXJkSW1hZ2Uuc2V0QXR0cmlidXRlKCdzcmMnLCBjYXJkT2JqZWN0LmxpbmspO1xyXG4gIGNhcmRJbWFnZS5zZXRBdHRyaWJ1dGUoJ2FsdCcsIGNhcmRPYmplY3QubmFtZSk7XHJcbiAgY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRfX3RpdGxlJykudGV4dENvbnRlbnQgPSBjYXJkT2JqZWN0Lm5hbWU7XHJcbiAgZGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2dCkgPT4ge1xyXG4gICAgY29uc3QgY2FyZFRvRGVsZXRlID0ge2NhcmQ6IGNhcmRFbGVtZW50LCBpZDogY2FyZE9iamVjdC5faWR9O1xyXG4gICAgb3BlbkNvbmZpcm1EZWxldGVQb3B1cChldnQsIGNhcmRUb0RlbGV0ZSk7XHJcbiAgfSk7XHJcbiAgaGVhcnRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBmdW5jdGlvbnMubGlrZUNhcmQoaGVhcnRCdXR0b24sIGNhcmRPYmplY3QsIGxpa2VzUXVhbnRpdHkpKTtcclxuICBjYXJkSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZ0KSA9PiBwb3B1cEZ1bmN0aW9uKGV2dCkpO1xyXG4gIGlmICghKG93bmVySWQgPT09IGNhcmRPYmplY3Qub3duZXIuX2lkKSkge1xyXG4gICAgZGVsZXRlQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgfVxyXG4gIGlmIChjYXJkT2JqZWN0Lmxpa2VzLnNvbWUoKG9iamVjdCkgPT4ge1xyXG4gICAgcmV0dXJuIG9iamVjdC5faWQgPT09IG93bmVySWQ7XHJcbiAgfSkpIHtcclxuICAgIGhlYXJ0QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2NhcmRfX2xpa2UtYnV0dG9uX2lzLWFjdGl2ZScpO1xyXG4gIH1cclxuICAvLyBjYXJkRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgY2FyZE9iamVjdC5faWQpO1xyXG4gIHJldHVybiBjYXJkRWxlbWVudDtcclxufTtcclxuXHJcbmZ1bmN0aW9uIGRlbGV0ZUNhcmQoY2FyZCkge1xyXG4gICAgICBjYXJkLnJlbW92ZSgpXHJcbn07XHJcblxyXG5mdW5jdGlvbiBsaWtlQ2FyZChoZWFydEJ1dHRvbiwgY2FyZE9iamVjdCwgbGlrZXNRdWFudGl0eSkge1xyXG4gIGlmIChoZWFydEJ1dHRvbi5jbGFzc0xpc3QudmFsdWUuaW5jbHVkZXMoJ2NhcmRfX2xpa2UtYnV0dG9uX2lzLWFjdGl2ZScpKSB7XHJcbiAgICBkZWxldGVMaWtlKGNhcmRPYmplY3QuX2lkKVxyXG4gICAgICAudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgaGVhcnRCdXR0b24uY2xhc3NMaXN0LnRvZ2dsZSgnY2FyZF9fbGlrZS1idXR0b25faXMtYWN0aXZlJyk7XHJcbiAgICAgICAgbGlrZXNRdWFudGl0eS5pbm5lclRleHQgPSByZXN1bHQubGlrZXMubGVuZ3RoO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coZXJyKSlcclxuICB9IGVsc2Uge1xyXG4gICAgcHV0TGlrZShjYXJkT2JqZWN0Ll9pZClcclxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgIGhlYXJ0QnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoJ2NhcmRfX2xpa2UtYnV0dG9uX2lzLWFjdGl2ZScpO1xyXG4gICAgICAgIGxpa2VzUXVhbnRpdHkuaW5uZXJUZXh0ID0gcmVzdWx0Lmxpa2VzLmxlbmd0aDtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGVycikpXHJcbiAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gZ2V0Q2FyZFRlbXBsYXRlKGNhcmRUZW1wbGF0ZSkge1xyXG4gIHJldHVybiBjYXJkVGVtcGxhdGUucXVlcnlTZWxlY3RvcignLnBsYWNlc19faXRlbScpLmNsb25lTm9kZSh0cnVlKTtcclxufTsiLCJleHBvcnQgZnVuY3Rpb24gb3Blbk1vZGFsKHBvcHVwVG9PcGVuKSB7XG4gIHBvcHVwVG9PcGVuLmNsYXNzTGlzdC5hZGQoJ3BvcHVwX2lzLW9wZW5lZCcpO1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgY2xvc2VCeUVzY2FwZSk7XG4gIHBvcHVwVG9PcGVuLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGNsb3NlSGFuZGxlcik7XG59O1xuXG5mdW5jdGlvbiBjbG9zZUJ5RXNjYXBlKGV2dCkge1xuICBpZiAoZXZ0LmtleSA9PT0gJ0VzY2FwZScpIHtcbiAgICBjb25zdCBwb3B1cE9wZW5lZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9pcy1vcGVuZWQnKTtcbiAgICBjbG9zZU1vZGFsKHBvcHVwT3BlbmVkKTtcbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNsb3NlTW9kYWwocG9wdXApIHtcbiAgcG9wdXAuY2xhc3NMaXN0LnJlbW92ZSgncG9wdXBfaXMtb3BlbmVkJyk7XG4gIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBjbG9zZUJ5RXNjYXBlKTtcbiAgcG9wdXAucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgY2xvc2VIYW5kbGVyKTtcbn07XG5cbmZ1bmN0aW9uIGNsb3NlSGFuZGxlciAoZXZ0KSB7XG4gIGlmIChldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncG9wdXBfaXMtb3BlbmVkJykpIHtcbiAgY2xvc2VNb2RhbChldnQudGFyZ2V0KTtcbiAgfTtcbn07IiwiZnVuY3Rpb24gc2hvd0lucHV0RXJyb3IgKGZvcm1FbGVtZW50LCBpbnB1dEVsZW1lbnQsIGVycm9yTWVzc2FnZSwgc2V0dGluZ3MpIHtcclxuICBjb25zdCBlcnJvckVsZW1lbnQgPSBmb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAuJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYCk7XHJcbiAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQoc2V0dGluZ3MuaW5wdXRFcnJvckNsYXNzKTtcclxuICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBlcnJvck1lc3NhZ2U7XHJcbiAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5hZGQoc2V0dGluZ3MuZXJyb3JDbGFzcyk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBoaWRlSW5wdXRFcnJvciAoZm9ybUVsZW1lbnQsIGlucHV0RWxlbWVudCwgc2V0dGluZ3MpIHtcclxuICBjb25zdCBlcnJvckVsZW1lbnQgPSBmb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAuJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYCk7XHJcbiAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoc2V0dGluZ3MuaW5wdXRFcnJvckNsYXNzKTtcclxuICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShzZXR0aW5ncy5lcnJvckNsYXNzKTtcclxuICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSAnJztcclxufTtcclxuXHJcbmZ1bmN0aW9uIGNoZWNrSW5wdXRWYWxpZGl0eSAoZm9ybUVsZW1lbnQsIGlucHV0RWxlbWVudCwgc2V0dGluZ3MpIHtcclxuICBpZiAoaW5wdXRFbGVtZW50LnZhbGlkaXR5LnBhdHRlcm5NaXNtYXRjaCkge1xyXG4gICAgaW5wdXRFbGVtZW50LnNldEN1c3RvbVZhbGlkaXR5KGlucHV0RWxlbWVudC5kYXRhc2V0LmVycm9yTWVzc2FnZSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGlucHV0RWxlbWVudC5zZXRDdXN0b21WYWxpZGl0eSgnJyk7XHJcbiAgfTtcclxuICBpZiAoIWlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZCkge1xyXG4gICAgc2hvd0lucHV0RXJyb3IoZm9ybUVsZW1lbnQsIGlucHV0RWxlbWVudCwgaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlLCBzZXR0aW5ncyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGhpZGVJbnB1dEVycm9yKGZvcm1FbGVtZW50LCBpbnB1dEVsZW1lbnQsIHNldHRpbmdzKTtcclxuICB9O1xyXG59O1xyXG5cclxuZnVuY3Rpb24gaGFzSW52YWxpZElucHV0KGlucHV0TGlzdCkge1xyXG4gIHJldHVybiBpbnB1dExpc3Quc29tZSgoZWxlbWVudCkgPT4ge1xyXG4gICAgcmV0dXJuICFlbGVtZW50LnZhbGlkaXR5LnZhbGlkXHJcbiAgfSk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiB0b2dnbGVCdXR0b25TdGF0ZShpbnB1dExpc3QsIGJ1dHRvbkVsZW1lbnQsIHNldHRpbmdzKSB7XHJcbiAgaWYgKGhhc0ludmFsaWRJbnB1dChpbnB1dExpc3QpKSB7XHJcbiAgICBidXR0b25FbGVtZW50LmNsYXNzTGlzdC5hZGQoc2V0dGluZ3MuaW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShzZXR0aW5ncy5pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICB9O1xyXG59O1xyXG5cclxuZnVuY3Rpb24gc2V0RXZlbnRMaXN0ZW5lcnMgKGZvcm1FbGVtZW50LCBzZXR0aW5ncykge1xyXG4gIGNvbnN0IGlucHV0TGlzdCA9IEFycmF5LmZyb20oZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZXR0aW5ncy5pbnB1dFNlbGVjdG9yKSk7XHJcbiAgY29uc3QgYnV0dG9uRWxlbWVudCA9IGZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3Ioc2V0dGluZ3Muc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xyXG4gIHRvZ2dsZUJ1dHRvblN0YXRlKGlucHV0TGlzdCwgYnV0dG9uRWxlbWVudCwgc2V0dGluZ3MpXHJcbiAgaW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBjaGVja0lucHV0VmFsaWRpdHkoZm9ybUVsZW1lbnQsIGlucHV0RWxlbWVudCwgc2V0dGluZ3MpO1xyXG4gICAgICB0b2dnbGVCdXR0b25TdGF0ZShpbnB1dExpc3QsIGJ1dHRvbkVsZW1lbnQsIHNldHRpbmdzKVxyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlVmFsaWRhdGlvbiAoc2V0dGluZ3MpIHtcclxuICBjb25zdCBmb3JtTGlzdCA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZXR0aW5ncy5mb3JtU2VsZWN0b3IpKTtcclxuICBmb3JtTGlzdC5mb3JFYWNoKChmb3JtRWxlbWVudCkgPT4ge1xyXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoZm9ybUVsZW1lbnQsIHNldHRpbmdzKTtcclxuICB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGVhclZhbGlkYXRpb24oZm9ybUVsZW1lbnQsIHNldHRpbmdzKSB7XHJcbiAgY29uc3QgaW5wdXRMaXN0ID0gQXJyYXkuZnJvbShmb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHNldHRpbmdzLmlucHV0U2VsZWN0b3IpKTtcclxuICBjb25zdCBidXR0b25FbGVtZW50ID0gZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihzZXR0aW5ncy5zdWJtaXRCdXR0b25TZWxlY3Rvcik7XHJcbiAgdG9nZ2xlQnV0dG9uU3RhdGUoaW5wdXRMaXN0LCBidXR0b25FbGVtZW50LCBzZXR0aW5ncyk7XHJcbiAgaW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgaGlkZUlucHV0RXJyb3IoZm9ybUVsZW1lbnQsIGlucHV0RWxlbWVudCwgc2V0dGluZ3MpO1xyXG4gIH0pXHJcbn0iLCJpbXBvcnQgJy4vcGFnZXMvaW5kZXguY3NzJztcbmltcG9ydCB7Y2FyZEZ1bmN0aW9uc30gZnJvbSAnLi9zY3JpcHRzL2NhcmQuanMnO1xuaW1wb3J0IHtvcGVuTW9kYWwsIGNsb3NlTW9kYWx9IGZyb20gJy4vc2NyaXB0cy9tb2RhbC5qcyc7XG5pbXBvcnQge2VuYWJsZVZhbGlkYXRpb24sIGNsZWFyVmFsaWRhdGlvbn0gZnJvbSAnLi9zY3JpcHRzL3ZhbGlkYXRpb24uanMnO1xuaW1wb3J0IHtnZXRBY2NvdW50SW5mbywgZ2V0SW5pdGlhbENhcmRzLCBwb3N0Q2FyZCwgcGF0Y2hBdmF0YXIsIHBhdGNoUHJvZmlsZUluZm8sIGRlbGV0ZUNhcmRGcm9tU2VydmVyfSBmcm9tICcuL3NjcmlwdHMvYXBpLmpzJztcblxuY29uc3QgY2FyZFRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NhcmQtdGVtcGxhdGUnKS5jb250ZW50O1xuXG5jb25zdCBwb3B1cEVkaXRQcm9maWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX3R5cGVfZWRpdCcpO1xuY29uc3QgcG9wdXBBZGRDYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX3R5cGVfbmV3LWNhcmQnKTtcbmNvbnN0IHBvcHVwV2l0aEltYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX3R5cGVfaW1hZ2UnKTtcbmNvbnN0IHBvcHVwRWRpdEF2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF90eXBlX2VkaXRfaW1hZ2UnKTtcbmNvbnN0IHBvcHVwQ29uZmlybURlbGV0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF90eXBlX2NvbmZpcm1fZGVsZXRlJyk7XG5cbmNvbnN0IGJ1dHRvblByb2ZpbGVFZGl0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2VkaXQtYnV0dG9uJyk7XG5jb25zdCBidXR0b25BZGRDYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2FkZC1idXR0b24nKTtcbmNvbnN0IGF2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX19pbWFnZScpO1xuY29uc3QgY3Jvc3NCdXR0b25zID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucG9wdXBfX2Nsb3NlJykpO1xuXG5jb25zdCBmb3JtRWRpdFByb2ZpbGUgPSBkb2N1bWVudC5mb3Jtc1snZWRpdC1wcm9maWxlJ107XG5jb25zdCBpbnB1dHNFZGl0UHJvZmlsZSA9IHtcbiAgbmFtZTogZm9ybUVkaXRQcm9maWxlWyduYW1lJ10sXG4gIGFib3V0OiBmb3JtRWRpdFByb2ZpbGVbJ2Rlc2NyaXB0aW9uJ10sXG59O1xuXG5jb25zdCBmb3JtQ29uZmlybURlbGV0ZSA9IGRvY3VtZW50LmZvcm1zWydjb25maXJtLWRlbGV0ZSddO1xuY29uc3QgY2FyZFRvRGVsZXRlR2xvYmFsID0ge307XG5cbmNvbnN0IGZvcm1FZGl0QXZhdGFyID0gZG9jdW1lbnQuZm9ybXNbJ2VkaXQtcHJvZmlsZS1pbWFnZSddO1xuY29uc3QgaW5wdXRFZGl0QXZhdGFyID0gZm9ybUVkaXRBdmF0YXJbJ2F2YXRhci1lZGl0J107XG5cbmNvbnN0IHZhbGlkYXRpb25TZXR0aW5ncyA9IHtcbiAgZm9ybVNlbGVjdG9yOiAnLnBvcHVwX19mb3JtJyxcbiAgaW5wdXRTZWxlY3RvcjogJy5wb3B1cF9faW5wdXQnLFxuICBzdWJtaXRCdXR0b25TZWxlY3RvcjogJy5wb3B1cF9fYnV0dG9uJyxcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogJ3BvcHVwX19idXR0b25fZGlzYWJsZWQnLFxuICBpbnB1dEVycm9yQ2xhc3M6ICdwb3B1cF9faW5wdXRfdHlwZV9lcnJvcicsXG4gIGVycm9yQ2xhc3M6ICdwb3B1cF9fZXJyb3JfdmlzaWJsZSdcbn1cblxuY29uc3QgcHJvZmlsZURhdGFPblBhZ2UgPSB7XG4gIG5hbWU6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX190aXRsZScpLFxuICBhYm91dDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2Rlc2NyaXB0aW9uJyksXG4gIGF2YXRhcjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2ltYWdlJyksXG59O1xuXG5jb25zdCBmb3JtTmV3UGxhY2UgPSBkb2N1bWVudC5mb3Jtc1snbmV3LXBsYWNlJ107XG5jb25zdCBuZXdQbGFjZU5hbWUgPSBmb3JtTmV3UGxhY2VbJ3BsYWNlLW5hbWUnXTtcbmNvbnN0IG5ld1BsYWNlTGluayA9IGZvcm1OZXdQbGFjZVsnbGluayddO1xuXG5jb25zdCBwb3B1cEltYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX19pbWFnZScpO1xuY29uc3QgcG9wdXBDYXB0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX19jYXB0aW9uJyk7XG5cbmNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wbGFjZXNfX2xpc3QnKTtcblxuZnVuY3Rpb24gc3VibWl0RWRpdFByb2ZpbGVGb3JtKGV2dCkge1xuICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgZXZ0LnN1Ym1pdHRlci5pbm5lclRleHQgPSAn0KHQvtGF0YDQsNC90LXQvdC40LUuLi4nO1xuICBwYXRjaFByb2ZpbGVJbmZvKGlucHV0c0VkaXRQcm9maWxlLm5hbWUudmFsdWUsIGlucHV0c0VkaXRQcm9maWxlLmFib3V0LnZhbHVlKVxuICAudGhlbigocmVzdWx0KSA9PiB7XG4gICAgcHJvZmlsZURhdGFPblBhZ2UubmFtZS50ZXh0Q29udGVudCA9IHJlc3VsdC5uYW1lO1xuICAgIHByb2ZpbGVEYXRhT25QYWdlLmFib3V0LnRleHRDb250ZW50ID0gcmVzdWx0LmFib3V0O1xuICAgIGNsb3NlTW9kYWwocG9wdXBFZGl0UHJvZmlsZSk7XG4gIH0pXG4gIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKVxuICAuZmluYWxseSgoKSA9PiB7XG4gICAgZXZ0LnN1Ym1pdHRlci5pbm5lclRleHQgPSAn0KHQvtGF0YDQsNC90LjRgtGMJ1xuICB9KVxufTtcblxuZnVuY3Rpb24gc3VibWl0RWRpdEF2YXRhckZvcm0oZXZ0KSB7XG4gIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICBldnQuc3VibWl0dGVyLmlubmVyVGV4dCA9ICfQodC+0YXRgNCw0L3QtdC90LjQtS4uLic7XG4gIHBhdGNoQXZhdGFyKGlucHV0RWRpdEF2YXRhci52YWx1ZSlcbiAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgIHByb2ZpbGVEYXRhT25QYWdlLmF2YXRhci5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBgdXJsKCR7cmVzdWx0LmF2YXRhcn0pYDtcbiAgICBjbG9zZU1vZGFsKHBvcHVwRWRpdEF2YXRhcik7XG4gIH0pXG4gIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKVxuICAuZmluYWxseSgoKSA9PiB7XG4gICAgZXZ0LnN1Ym1pdHRlci5pbm5lclRleHQgPSAn0KHQvtGF0YDQsNC90LjRgtGMJ1xuXG4gIH0pXG59O1xuXG5mdW5jdGlvbiBzdWJtaXRDb25maXJtRGVsZXRlRm9ybShldnQpIHtcbiAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gIGRlbGV0ZUNhcmRGcm9tU2VydmVyKGNhcmRUb0RlbGV0ZUdsb2JhbC5pZClcbiAgLnRoZW4ocmVzID0+IHtcbiAgICBjYXJkRnVuY3Rpb25zLmRlbGV0ZUNhcmQoY2FyZFRvRGVsZXRlR2xvYmFsLmNhcmQpXG4gICAgY2xvc2VNb2RhbChwb3B1cENvbmZpcm1EZWxldGUpO1xuICB9KVxuICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpXG4gIC8vIGNvbnN0IGNhcmRUb0RlbGV0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke2V2dC50YXJnZXQuY2xvc2VzdCgnLnBvcHVwJykuaWR9YCk7XG59XG5cbmZ1bmN0aW9uIG9wZW5JbWFnZVBvcHVwKGV2dCkge1xuICBvcGVuTW9kYWwocG9wdXBXaXRoSW1hZ2UpO1xuICBwb3B1cEltYWdlLnNyYyA9IGV2dC50YXJnZXQuc3JjO1xuICBwb3B1cEltYWdlLmFsdCA9IGV2dC50YXJnZXQuYWx0O1xuICBwb3B1cENhcHRpb24uaW5uZXJUZXh0ID0gZXZ0LnRhcmdldC5hbHQ7XG59O1xuXG5mdW5jdGlvbiBvcGVuQ29uZmlybURlbGV0ZVBvcHVwKGV2dCwgY2FyZFRvRGVsZXRlKSB7XG4gIG9wZW5Nb2RhbChwb3B1cENvbmZpcm1EZWxldGUpO1xuICAvLyBwb3B1cENvbmZpcm1EZWxldGUuc2V0QXR0cmlidXRlKCdpZCcsIGAke2V2dC50YXJnZXQuY2xvc2VzdCgnLmNhcmQnKS5pZH1gKTtcbiAgY2FyZFRvRGVsZXRlR2xvYmFsLmNhcmQgPSBjYXJkVG9EZWxldGUuY2FyZDtcbiAgY2FyZFRvRGVsZXRlR2xvYmFsLmlkID0gY2FyZFRvRGVsZXRlLmlkO1xufTtcblxuZW5hYmxlVmFsaWRhdGlvbih2YWxpZGF0aW9uU2V0dGluZ3MpO1xuXG5jcm9zc0J1dHRvbnMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2dCkgPT4ge1xuICAgIGNsb3NlTW9kYWwoZXZ0LnRhcmdldC5jbG9zZXN0KCcucG9wdXAnKSlcbiAgfSlcbn0pXG5cbmJ1dHRvblByb2ZpbGVFZGl0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICBvcGVuTW9kYWwocG9wdXBFZGl0UHJvZmlsZSk7XG4gIGNsZWFyVmFsaWRhdGlvbihmb3JtRWRpdFByb2ZpbGUsIHZhbGlkYXRpb25TZXR0aW5ncyk7XG4gIGZvcm1FZGl0UHJvZmlsZS5xdWVyeVNlbGVjdG9yKHZhbGlkYXRpb25TZXR0aW5ncy5zdWJtaXRCdXR0b25TZWxlY3RvcikuY2xhc3NMaXN0LmFkZCh2YWxpZGF0aW9uU2V0dGluZ3MuaW5hY3RpdmVCdXR0b25DbGFzcyk7XG4gIGlucHV0c0VkaXRQcm9maWxlLm5hbWUudmFsdWUgPSBwcm9maWxlRGF0YU9uUGFnZS5uYW1lLmlubmVyVGV4dDtcbiAgaW5wdXRzRWRpdFByb2ZpbGUuYWJvdXQudmFsdWUgPSBwcm9maWxlRGF0YU9uUGFnZS5hYm91dC5pbm5lclRleHQ7XG59KTtcblxuYnV0dG9uQWRkQ2FyZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgZm9ybU5ld1BsYWNlLnJlc2V0KCk7XG4gIG9wZW5Nb2RhbChwb3B1cEFkZENhcmQpO1xuICBjbGVhclZhbGlkYXRpb24oZm9ybU5ld1BsYWNlLCB2YWxpZGF0aW9uU2V0dGluZ3MpXG59KTtcblxuYXZhdGFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICBvcGVuTW9kYWwocG9wdXBFZGl0QXZhdGFyKTtcbiAgY2xlYXJWYWxpZGF0aW9uKGlucHV0RWRpdEF2YXRhciwgdmFsaWRhdGlvblNldHRpbmdzKTtcbiAgZm9ybUVkaXRBdmF0YXIucmVzZXQoKTtcbn0pO1xuXG5mb3JtQ29uZmlybURlbGV0ZS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBzdWJtaXRDb25maXJtRGVsZXRlRm9ybSlcblxuZm9ybUVkaXRQcm9maWxlLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHN1Ym1pdEVkaXRQcm9maWxlRm9ybSk7XG5cbmZvcm1FZGl0QXZhdGFyLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHN1Ym1pdEVkaXRBdmF0YXJGb3JtKTtcblxuZm9ybU5ld1BsYWNlLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldnQpID0+IHtcbiAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gIGV2dC5zdWJtaXR0ZXIuaW5uZXJUZXh0ID0gJ9Ch0L7Qt9C00LDQvdC40LUuLi4nO1xuICBwb3N0Q2FyZChuZXdQbGFjZU5hbWUsIG5ld1BsYWNlTGluaylcbiAgICAudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICBjb250YWluZXIucHJlcGVuZChjYXJkRnVuY3Rpb25zLmNyZWF0ZUNhcmQoY2FyZFRlbXBsYXRlLCByZXN1bHQsIGNhcmRGdW5jdGlvbnMsIG9wZW5JbWFnZVBvcHVwLCByZXN1bHQub3duZXIuX2lkLCBvcGVuQ29uZmlybURlbGV0ZVBvcHVwKSk7XG4gICAgICBjbG9zZU1vZGFsKHBvcHVwQWRkQ2FyZCk7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coZXJyKSlcbn0pO1xuXG5Qcm9taXNlLmFsbChbXG4gIGdldEFjY291bnRJbmZvKCksXG4gIGdldEluaXRpYWxDYXJkcygpXG4gIF0pXG4gICAgLnRoZW4oKFthY2NvdW50SW5mbywgY2FyZHNdKSA9PiB7XG4gICAgICBwcm9maWxlRGF0YU9uUGFnZS5uYW1lLnRleHRDb250ZW50ID0gYWNjb3VudEluZm8ubmFtZTtcbiAgICAgIHByb2ZpbGVEYXRhT25QYWdlLmFib3V0LnRleHRDb250ZW50ID0gYWNjb3VudEluZm8uYWJvdXQ7XG4gICAgICBwcm9maWxlRGF0YU9uUGFnZS5hdmF0YXIuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybCgke2FjY291bnRJbmZvLmF2YXRhcn0pYDtcbiAgICAgIGNhcmRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICBjb250YWluZXIuYXBwZW5kKGNhcmRGdW5jdGlvbnMuY3JlYXRlQ2FyZChcbiAgICAgICAgICBjYXJkVGVtcGxhdGUsXG4gICAgICAgICAgaXRlbSxcbiAgICAgICAgICBjYXJkRnVuY3Rpb25zLFxuICAgICAgICAgIG9wZW5JbWFnZVBvcHVwLFxuICAgICAgICAgIGFjY291bnRJbmZvLl9pZCxcbiAgICAgICAgICBvcGVuQ29uZmlybURlbGV0ZVBvcHVwKSk7XG4gICAgICB9KVxuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGVycikpIl0sIm5hbWVzIjpbImNvbmZpZyIsImJhc2VVUkwiLCJoZWFkZXJzIiwiYXV0aG9yaXphdGlvbiIsImdldFJlc3BvbnNlRGF0YSIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJjb25jYXQiLCJzdGF0dXMiLCJnZXRBY2NvdW50SW5mbyIsImZldGNoIiwibWV0aG9kIiwidGhlbiIsImdldEluaXRpYWxDYXJkcyIsInBvc3RDYXJkIiwibmV3UGxhY2VOYW1lIiwibmV3UGxhY2VMaW5rIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJuYW1lIiwidmFsdWUiLCJsaW5rIiwicGF0Y2hBdmF0YXIiLCJuZXdMaW5rIiwiYXZhdGFyIiwicGF0Y2hQcm9maWxlSW5mbyIsInByb2ZpbGVOYW1lIiwicHJvZmlsZUFib3V0IiwiYWJvdXQiLCJkZWxldGVDYXJkRnJvbVNlcnZlciIsImNhcmRJRCIsImRlbGV0ZUxpa2UiLCJwdXRMaWtlIiwiY2FyZEZ1bmN0aW9ucyIsImNyZWF0ZUNhcmQiLCJkZWxldGVDYXJkIiwibGlrZUNhcmQiLCJjYXJkVGVtcGxhdGUiLCJjYXJkT2JqZWN0IiwiZnVuY3Rpb25zIiwicG9wdXBGdW5jdGlvbiIsIm93bmVySWQiLCJvcGVuQ29uZmlybURlbGV0ZVBvcHVwIiwiY2FyZEVsZW1lbnQiLCJnZXRDYXJkVGVtcGxhdGUiLCJkZWxldGVCdXR0b24iLCJxdWVyeVNlbGVjdG9yIiwiaGVhcnRCdXR0b24iLCJjYXJkSW1hZ2UiLCJsaWtlc1F1YW50aXR5IiwiaW5uZXJUZXh0IiwibGlrZXMiLCJsZW5ndGgiLCJzZXRBdHRyaWJ1dGUiLCJ0ZXh0Q29udGVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldnQiLCJjYXJkVG9EZWxldGUiLCJjYXJkIiwiaWQiLCJfaWQiLCJvd25lciIsInN0eWxlIiwiZGlzcGxheSIsInNvbWUiLCJvYmplY3QiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJpbmNsdWRlcyIsInJlc3VsdCIsInRvZ2dsZSIsImNhdGNoIiwiZXJyIiwiY29uc29sZSIsImxvZyIsImNsb25lTm9kZSIsIm9wZW5Nb2RhbCIsInBvcHVwVG9PcGVuIiwiZG9jdW1lbnQiLCJjbG9zZUJ5RXNjYXBlIiwiY2xvc2VIYW5kbGVyIiwia2V5IiwicG9wdXBPcGVuZWQiLCJjbG9zZU1vZGFsIiwicG9wdXAiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidGFyZ2V0IiwiY29udGFpbnMiLCJzaG93SW5wdXRFcnJvciIsImZvcm1FbGVtZW50IiwiaW5wdXRFbGVtZW50IiwiZXJyb3JNZXNzYWdlIiwic2V0dGluZ3MiLCJlcnJvckVsZW1lbnQiLCJpbnB1dEVycm9yQ2xhc3MiLCJlcnJvckNsYXNzIiwiaGlkZUlucHV0RXJyb3IiLCJjaGVja0lucHV0VmFsaWRpdHkiLCJ2YWxpZGl0eSIsInBhdHRlcm5NaXNtYXRjaCIsInNldEN1c3RvbVZhbGlkaXR5IiwiZGF0YXNldCIsInZhbGlkIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJoYXNJbnZhbGlkSW5wdXQiLCJpbnB1dExpc3QiLCJlbGVtZW50IiwidG9nZ2xlQnV0dG9uU3RhdGUiLCJidXR0b25FbGVtZW50IiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsInNldEV2ZW50TGlzdGVuZXJzIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsImlucHV0U2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsImZvckVhY2giLCJlbmFibGVWYWxpZGF0aW9uIiwiZm9ybUxpc3QiLCJmb3JtU2VsZWN0b3IiLCJjbGVhclZhbGlkYXRpb24iLCJjb250ZW50IiwicG9wdXBFZGl0UHJvZmlsZSIsInBvcHVwQWRkQ2FyZCIsInBvcHVwV2l0aEltYWdlIiwicG9wdXBFZGl0QXZhdGFyIiwicG9wdXBDb25maXJtRGVsZXRlIiwiYnV0dG9uUHJvZmlsZUVkaXQiLCJidXR0b25BZGRDYXJkIiwiY3Jvc3NCdXR0b25zIiwiZm9ybUVkaXRQcm9maWxlIiwiZm9ybXMiLCJpbnB1dHNFZGl0UHJvZmlsZSIsImZvcm1Db25maXJtRGVsZXRlIiwiY2FyZFRvRGVsZXRlR2xvYmFsIiwiZm9ybUVkaXRBdmF0YXIiLCJpbnB1dEVkaXRBdmF0YXIiLCJ2YWxpZGF0aW9uU2V0dGluZ3MiLCJwcm9maWxlRGF0YU9uUGFnZSIsImZvcm1OZXdQbGFjZSIsInBvcHVwSW1hZ2UiLCJwb3B1cENhcHRpb24iLCJjb250YWluZXIiLCJzdWJtaXRFZGl0UHJvZmlsZUZvcm0iLCJwcmV2ZW50RGVmYXVsdCIsInN1Ym1pdHRlciIsImZpbmFsbHkiLCJzdWJtaXRFZGl0QXZhdGFyRm9ybSIsImJhY2tncm91bmRJbWFnZSIsInN1Ym1pdENvbmZpcm1EZWxldGVGb3JtIiwib3BlbkltYWdlUG9wdXAiLCJzcmMiLCJhbHQiLCJpdGVtIiwiY2xvc2VzdCIsInJlc2V0IiwicHJlcGVuZCIsImFsbCIsIl9yZWYiLCJfcmVmMiIsIl9zbGljZWRUb0FycmF5IiwiYWNjb3VudEluZm8iLCJjYXJkcyIsImFwcGVuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///29\n")}},__webpack_exports__={};__webpack_modules__[29]()})();